
// import React, { createContext, useContext, useState, useEffect, useCallback, useRef } from 'react';
// import { db } from '../firebase/config';
// import { doc, setDoc, serverTimestamp } from "firebase/firestore";
// import { getAuth, onAuthStateChanged, signOut } from "firebase/auth";

// const SESSION_TIMEOUT = 20 * 60 * 1000; // 20 minutes
// const AuthContext = createContext();

// export function AuthProvider({ children }) {
//   const [user, setUser] = useState(null);
//   const [sessionActive, setSessionActive] = useState(false);
//   const timeoutIdRef = useRef(null);
//   const sessionIdRef = useRef(null);
//   const [initializing, setInitializing] = useState(true);
//   const auth = getAuth();

//   // Generate unique session ID
//   const generateSessionId = () => `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

//   // Restore session on mount
//   useEffect(() => {
//     const storedUser = localStorage.getItem('user');
//     const sessionTimestamp = localStorage.getItem('sessionTimestamp');
//     const storedSessionId = localStorage.getItem('sessionId');

//     if (storedUser && sessionTimestamp && storedSessionId) {
//       const timeElapsed = Date.now() - parseInt(sessionTimestamp, 10);
//       if (timeElapsed < SESSION_TIMEOUT) {
//         const parsedUser = JSON.parse(storedUser);
//         setUser(parsedUser);
//         setSessionActive(true);
//         sessionIdRef.current = storedSessionId;
//       } else {
//         clearSessionData();
//       }
//     }
//     setInitializing(false);
//   }, []);

//   // Track authentication state
//   useEffect(() => {
//     const unsubscribe = onAuthStateChanged(auth, (firebaseUser) => {
//       if (!firebaseUser) {
//         console.log("Firebase auth state changed: user signed out");
//         logout();
//       }
//     });
    
//     return () => unsubscribe();
//   }, [auth]);

//   // Track tab close events
//   useEffect(() => {
//     const handleBeforeUnload = async () => {
//       if (sessionIdRef.current && user?.phone) {
//         try {
//           await logSessionEnd();
//         } catch (error) {
//           console.error("Error logging tab close:", error);
//         }
//       }
//     };

//     window.addEventListener('beforeunload', handleBeforeUnload);
//     return () => {
//       window.removeEventListener('beforeunload', handleBeforeUnload);
//     };
//   }, [user]);

//   const clearSessionData = () => {
//     localStorage.removeItem('user');
//     localStorage.removeItem('sessionTimestamp');
//     localStorage.removeItem('sessionId');
//   };

//   const logSessionEnd = async () => {
//     if (sessionIdRef.current && user?.phone) {
//       try {
//         const userRef = doc(db, 'userSessions', user.phone);
//         await setDoc(userRef, {
//           sessions: {
//             [sessionIdRef.current]: {
//               logoutTime: serverTimestamp()
//             }
//           }
//         }, { merge: true });
//       } catch (error) {
//         console.error("Error logging logout time:", error);
//       }
//     }
//   };

//   const logout = useCallback(async () => {
//     await logSessionEnd();
    
//     // Clear all state and storage
//     setUser(null);
//     setSessionActive(false);
//     sessionIdRef.current = null;
//     clearSessionData();
    
//     // Sign out from Firebase
//     if (auth.currentUser) {
//       await signOut(auth);
//     }
//   }, [user, auth]);

//   const resetSessionTimeout = useCallback(() => {
//     localStorage.setItem('sessionTimestamp', Date.now().toString());
//   }, []);

//   // Session timeout handler
//   useEffect(() => {
//     if (!sessionActive) {
//       if (timeoutIdRef.current) {
//         clearTimeout(timeoutIdRef.current);
//         timeoutIdRef.current = null;
//       }
//       return;
//     }

//     const onTimeout = () => {
//       logout();
//       alert('Session expired due to inactivity');
//     };

//     timeoutIdRef.current = setTimeout(onTimeout, SESSION_TIMEOUT);

//     const handleActivity = () => {
//       resetSessionTimeout();
//       if (timeoutIdRef.current) {
//         clearTimeout(timeoutIdRef.current);
//       }
//       timeoutIdRef.current = setTimeout(onTimeout, SESSION_TIMEOUT);
//     };

//     window.addEventListener('mousemove', handleActivity);
//     window.addEventListener('keydown', handleActivity);
//     window.addEventListener('click', handleActivity);

//     return () => {
//       if (timeoutIdRef.current) {
//         clearTimeout(timeoutIdRef.current);
//       }
//       window.removeEventListener('mousemove', handleActivity);
//       window.removeEventListener('keydown', handleActivity);
//       window.removeEventListener('click', handleActivity);
//     };
//   }, [sessionActive, logout, resetSessionTimeout]);

//   const login = async (userData) => {
//     const sessionId = generateSessionId();
//     const minimalUserData = {
//       id: userData.id,
//       name: userData.name,
//       employeeID: userData.employeeID,
//       phone: userData.phone,
//       role: userData.role,
//       sessionId: sessionId,
//     };

//     // Set user state
//     setUser(minimalUserData);
//     setSessionActive(true);
//     sessionIdRef.current = sessionId;
    
//     // Store in localStorage
//     localStorage.setItem('user', JSON.stringify(minimalUserData));
//     localStorage.setItem('sessionTimestamp', Date.now().toString());
//     localStorage.setItem('sessionId', sessionId);

//     // Log login to Firestore
//     try {
//       const userRef = doc(db, 'userSessions', userData.phone);
//       await setDoc(userRef, {
//         name: userData.name,
//         phone: userData.phone,
//         employeeID: userData.employeeID,
//         sessions: {
//           [sessionId]: {
//             loginTime: serverTimestamp(),
//             logoutTime: null
//           }
//         }
//       }, { merge: true });
//     } catch (error) {
//       console.error("Error logging login time:", error);
//     }
//   };

//   return (
//     <AuthContext.Provider value={{ 
//       user, 
//       login, 
//       logout, 
//       resetSessionTimeout,
//       initializing
//     }}>
//       {children}
//     </AuthContext.Provider>
//   );
// }

// export function useAuth() {
//   const context = useContext(AuthContext);
//   if (!context) {
//     throw new Error('useAuth must be used within an AuthProvider');
//   }
//   return context;
// }




// // Login.js
// import React, { useState } from 'react';
// import { auth, db } from './firebase/config';
// import { RecaptchaVerifier, signInWithPhoneNumber } from "firebase/auth";
// import { doc, setDoc } from 'firebase/firestore';

// const Login = () => {
//   const [countryCode, setCountryCode] = useState("+91");
//   const [phoneNumber, setPhoneNumber] = useState("");
//   const [otp, setOtp] = useState("");
//   const [confirmationResult, setConfirmationResult] = useState(null);
//   const [isOtpSent, setIsOtpSent] = useState(false);

//   const setupRecaptcha = () => {
//     if (!window.recaptchaVerifier) {
//       window.recaptchaVerifier = new RecaptchaVerifier(auth, 'recaptcha-container', {
//         size: 'invisible',
//         callback: (response) => {
//           console.log("Recaptcha solved");
//         },
//       });
//     }
//   };

//   const handleSendOtp = async () => {
//     const fullPhoneNumber = countryCode + phoneNumber;

//     setupRecaptcha();
//     const appVerifier = window.recaptchaVerifier;

//     try {
//       const result = await signInWithPhoneNumber(auth, fullPhoneNumber, appVerifier);
//       setConfirmationResult(result);
//       setIsOtpSent(true);
//       console.log("OTP sent!");
//     } catch (error) {
//       console.error("Error sending OTP:", error.message);
//     }
//   };

//   const handleVerifyOtp = async () => {
//     try {
//       const result = await confirmationResult.confirm(otp);
//       const user = result.user;
//       console.log("User verified:", user.uid);

//       // Save to Firestore
//       const userRef = doc(db, "users_01", user.uid);
//       await setDoc(userRef, {
//         uid: user.uid,
//         phoneNumber,
//         countryCode,
//         fullPhoneNumber: countryCode + phoneNumber,
//         createdAt: new Date()
//       });

//       alert("Phone number verified and saved to Firestore!");
//     } catch (error) {
//       console.error("Invalid OTP", error.message);
//     }
//   };

//   return (
//     <div style={{ padding: '20px' }}>
//       <h2>Phone Login</h2>

//       {!isOtpSent ? (
//         <>
//           <input
//             type="text"
//             placeholder="+91"
//             value={countryCode}
//             onChange={(e) => setCountryCode(e.target.value)}
//           />
//           <input
//             type="text"
//             placeholder="Phone Number"
//             value={phoneNumber}
//             onChange={(e) => setPhoneNumber(e.target.value)}
//           />
//           <button onClick={handleSendOtp}>Send OTP</button>
//         </>
//       ) : (
//         <>
//           <input
//             type="text"
//             placeholder="Enter OTP"
//             value={otp}
//             onChange={(e) => setOtp(e.target.value)}
//           />
//           <button onClick={handleVerifyOtp}>Verify OTP</button>
//         </>
//       )}

//       <div id="recaptcha-container"></div>
//     </div>
//   );
// };

// export default Login;
