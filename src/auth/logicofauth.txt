
The issue is that the beforeunload event is triggering when you refresh the page, which logs a logout time. We need to differentiate between a page refresh and a full tab close. Here's the fix:

Update AuthContext.js
javascript:src/auth/AuthContext.js
// ... existing imports ...

export function AuthProvider({ children }) {
  // ... existing state and refs ...

  // Track tab close events (but not refreshes)
  useEffect(() => {
    const handleBeforeUnload = async (event) => {
      // Only trigger if it's a full close (not refresh)
      if (!event.currentTarget.performance.navigation.type === 1) {
        if (sessionIdRef.current && user?.phone) {
          try {
            const userRef = doc(db, 'userSessions', user.phone);
            await setDoc(userRef, {
              sessions: {
                [sessionIdRef.current]: {
                  logoutTime: serverTimestamp()
                }
              }
            }, { merge: true });
          } catch (error) {
            console.error("Error logging tab close:", error);
          }
        }
      }
    };

    window.addEventListener('beforeunload', handleBeforeUnload);
    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
    };
  }, [user]);

  // ... rest of the code ...
Explanation of the fix:
Differentiating refresh vs close:

We use event.currentTarget.performance.navigation.type

Type 1 = Page reload/refresh

Type 0 = Normal navigation

Type 2 = Back/forward navigation

Modified condition:

javascript
if (!event.currentTarget.performance.navigation.type === 1)
This ensures the logout time is only logged when it's NOT a refresh

Why this works:

Page refreshes will have type = 1

Tab closes will have type = 0 (or undefined in some browsers)

We only log logout time for non-refresh events

Alternative approach (more reliable):
If the navigation type detection doesn't work consistently across browsers, we can use sessionStorage to detect refreshes:

javascript:src/auth/AuthContext.js
// ... inside the beforeunload handler ...

// Set a refresh flag just before unload
sessionStorage.setItem('isRefreshing', 'true');

// Then after page loads:
useEffect(() => {
  const isRefreshing = sessionStorage.getItem('isRefreshing');
  if (isRefreshing) {
    sessionStorage.removeItem('isRefreshing');
    // This was a refresh, skip logout logging
  }
}, []);
But I recommend the first solution as it's simpler and works in most modern browsers.

Final note:
The performance.navigation API is well-supported in modern browsers:

Chrome: Supported

Firefox: Supported

Safari: Supported

Edge: Supported




Categories 
// import React, { useEffect, useState } from "react";
// import {
//   collection,
//   getDocs,
//   setDoc,
//   updateDoc,
//   deleteDoc,
//   doc,
// } from "firebase/firestore";
// import { db } from "../../firebase/config";
// import { useAuth } from "../../auth/AuthContext";
// import { ROLES } from "../../config/roles";
// import { FiEdit, FiTrash2, FiToggleLeft, FiToggleRight, FiPlus, FiSearch, FiX } from "react-icons/fi";
// import Skeleton, { SkeletonTheme } from 'react-loading-skeleton';
// import 'react-loading-skeleton/dist/skeleton.css';


// const Categories = () => {
//   const { user } = useAuth();
//   const isAdmin = user?.role === ROLES.ADMIN;

//   // console.log('Current User:', user);
//   // console.log('isAdmin:', isAdmin, 'ROLES.ADMIN:', ROLES.ADMIN, 'user?.role:', user?.role);

//   const [categories, setCategories] = useState([]);
//   const [newCategory, setNewCategory] = useState("");
//   const [editingId, setEditingId] = useState(null);
//   const [editingName, setEditingName] = useState("");
//   const [editingIdValue, setEditingIdValue] = useState("");
//   const [searchTerm, setSearchTerm] = useState("");
//   const [filteredCategories, setFilteredCategories] = useState([]);
//   const [loading, setLoading] = useState(true);

//   const fetchCategories = async () => {
//     setLoading(true);
//     try {
//       const catRef = collection(db, "category");
//       const snapshot = await getDocs(catRef);
//       const data = snapshot.docs.map((doc) => ({
//         firestoreId: doc.id,
//         ...doc.data(),
//       }));
//       setCategories(data);
//     } catch (error) {
//       console.error("Error fetching categories:", error);
//     } finally {
//       setLoading(false);
//     }
//   };

//   useEffect(() => {
//     if (isAdmin) {
//       fetchCategories();
//     }
//   }, [isAdmin]);

//   useEffect(() => {
//     const lowercasedSearchTerm = searchTerm.toLowerCase();
//     const results = categories.filter((cat) =>
//       cat.name.toLowerCase().includes(lowercasedSearchTerm)
//     );
//     setFilteredCategories(results);
//   }, [categories, searchTerm]);

//   if (!isAdmin) {
//     return (
//       <div className="flex items-center justify-center min-h-screen bg-gray-50">
//         <div className="max-w-md p-6 bg-white rounded-xl shadow-md text-center">
//           <div className="text-3xl mb-4">ðŸ”’</div>
//           <h2 className="text-2xl font-bold text-gray-800 mb-2">Admin Access Required</h2>
//           <p className="text-gray-600">
//             You don't have permission to access this page. Please contact your administrator.
//           </p>
//         </div>
//       </div>
//     );
//   }

//   const handleAddCategory = async () => {
//     if (newCategory.trim() === "") {
//       alert("Please enter a category name!");
//       return;
//     }

//     try {
//       const newNumber = categories.length + 1;
//       const newId = `cat${newNumber.toString().padStart(2, "0")}`;

//       await setDoc(doc(db, "category", newId), {
//         id: newId,
//         name: newCategory,
//         active: true,
//       });

//       setCategories([...categories, {
//         firestoreId: newId,
//         id: newId,
//         name: newCategory,
//         active: true
//       }]);
//       setNewCategory("");
//     } catch (error) {
//       console.error("Error adding category:", error);
//       alert("Failed to add category. Please try again.");
//     }
//   };

//   const handleDeleteCategory = async (firestoreId) => {
//     if (!window.confirm("Are you sure you want to delete this category?")) return;

//     try {
//       await deleteDoc(doc(db, "category", firestoreId));
//       setCategories(categories.filter((cat) => cat.firestoreId !== firestoreId));
//     } catch (error) {
//       console.error("Error deleting category:", error);
//       alert("Failed to delete category. Please try again.");
//     }
//   };

//   const handleUpdateCategory = async (firestoreId) => {
//     if (editingName.trim() === "" || editingIdValue.trim() === "") {
//       alert("Category name and ID cannot be empty!");
//       return;
//     }

//     try {
//       const originalCategory = categories.find((cat) => cat.firestoreId === firestoreId);

//       if (editingIdValue !== originalCategory.id) {
//         // Delete the original document
//         await deleteDoc(doc(db, "category", firestoreId));

//         // Create a new document with the new ID
//         await setDoc(doc(db, "category", editingIdValue), {
//           id: editingIdValue,
//           name: editingName,
//           active: originalCategory.active,
//         });

//         // Update local state
//         setCategories(
//           categories.map((cat) =>
//             cat.firestoreId === firestoreId
//               ? { ...cat, firestoreId: editingIdValue, id: editingIdValue, name: editingName }
//               : cat
//           )
//         );
//       } else {
//         // Only update the name if ID hasn't changed
//         const docRef = doc(db, "category", firestoreId);
//         await updateDoc(docRef, { name: editingName });

//         setCategories(
//           categories.map((cat) =>
//             cat.firestoreId === firestoreId ? { ...cat, name: editingName } : cat
//           )
//         );
//       }

//       setEditingId(null);
//       setEditingName("");
//       setEditingIdValue("");
//     } catch (error) {
//       console.error("Error updating category:", error);
//       alert("Failed to update category. Please try again.");
//     }
//   };

//   const toggleActive = async (firestoreId, currentActive) => {
//     try {
//       const docRef = doc(db, "category", firestoreId);
//       await updateDoc(docRef, { active: !currentActive });
//       fetchCategories();
//     } catch (error) {
//       console.error("Error toggling category status:", error);
//       alert("Failed to update category status. Please try again.");
//     }
//   };

//   return (
//     <div className="min-h-screen bg-gray-50 p-4 md:p-8">
//       <div className="max-w-6xl mx-auto bg-white rounded-xl shadow-md overflow-hidden">
//         <div className="p-6">
//           <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-8">
//             <div>
//               <h1 className="text-2xl md:text-3xl font-bold text-gray-800">Category Management</h1>
//               <p className="text-gray-600 mt-1">
//                 Manage your product categories and organization
//               </p>
//             </div>
//             <div className="mt-4 md:mt-0">
//               <div className="flex flex-col sm:flex-row gap-3">
//                 <div className="relative flex-grow">
//                   <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
//                     <FiSearch className="text-gray-400" />
//                   </div>
//                   <input
//                     className="block w-full pl-10 pr-10 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-base"
//                     placeholder="Search categories..."
//                     value={searchTerm}
//                     onChange={(e) => setSearchTerm(e.target.value)}
//                   />
//                   {searchTerm && (
//                     <button
//                       onClick={() => setSearchTerm('')}
//                       className="absolute inset-y-0 right-0 pr-3 flex items-center"
//                     >
//                       <FiX className="text-gray-400 hover:text-gray-600" />
//                     </button>
//                   )}
//                 </div>
//               </div>
//             </div>
//           </div>

//           <div className="mb-8 bg-blue-50 p-4 rounded-lg border border-blue-100">
//             <h2 className="text-lg font-semibold text-blue-800 mb-3">Add New Category</h2>
//             <div className="flex flex-col sm:flex-row gap-3">
//               <input
//                 className="flex-grow px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-base"
//                 placeholder="Enter category name"
//                 value={newCategory}
//                 onChange={(e) => setNewCategory(e.target.value)}
//                 onKeyPress={(e) => e.key === 'Enter' && handleAddCategory()}
//               />
//               <button
//                 className="flex items-center justify-center bg-gradient-to-r from-blue-600 to-indigo-700 hover:from-blue-700 hover:to-indigo-800 text-white px-6 py-2 rounded-lg font-medium transition-all duration-200 shadow-md hover:shadow-lg"
//                 onClick={handleAddCategory}
//               >
//                 <FiPlus className="mr-2" />
//                 Add Category
//               </button>
//             </div>
//           </div>

//           <div className="border border-gray-200 rounded-xl overflow-hidden shadow-sm">
//             <div className="overflow-x-auto">
//               <table className="min-w-full divide-y divide-gray-200">
//                 <thead className="bg-gray-100">
//                   <tr>
//                     <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
//                       ID
//                     </th>
//                     <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
//                       Name
//                     </th>
//                     <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-700 uppercase tracking-wider">
//                       Actions
//                     </th>
//                   </tr>
//                 </thead>
//                 <tbody className="bg-white divide-y divide-gray-200">
//                   {loading ? (
//                     <SkeletonTheme baseColor="#e5e7eb" highlightColor="#f3f4f6">
//                       {[...Array(5)].map((_, index) => (
//                         <tr key={index} className="hover:bg-gray-50 transition-colors">
//                           <td className="px-6 py-4 whitespace-nowrap">
//                             <Skeleton width={60} height={24} />
//                           </td>
//                           <td className="px-6 py-4">
//                             <div className="flex items-center">
//                               <Skeleton width={150} height={24} />
//                               <Skeleton width={60} height={24} className="ml-2" />
//                             </div>
//                           </td>
//                           <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
//                             <div className="flex justify-end space-x-2">
//                               <Skeleton width={32} height={32} circle />
//                               <Skeleton width={32} height={32} circle />
//                               <Skeleton width={32} height={32} circle />
//                             </div>
//                           </td>
//                         </tr>
//                       ))}
//                     </SkeletonTheme>
//                   ) : filteredCategories.length === 0 ? (
//                     <tr>
//                       <td colSpan="3" className="px-6 py-8 text-center text-gray-500">
//                         {searchTerm ? "No matching categories found" : "No categories available"}
//                       </td>
//                     </tr>
//                   ) : (
//                     filteredCategories.map((cat) => (
//                       <tr key={cat.firestoreId} className="hover:bg-gray-50 transition-colors">
//                         <td className="px-6 py-4 whitespace-nowrap">
//                           {editingId === cat.firestoreId ? (
//                             <input
//                               className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-base"
//                               value={editingIdValue}
//                               onChange={(e) => setEditingIdValue(e.target.value)}
//                               autoFocus
//                             />
//                           ) : (
//                             <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs font-medium rounded-full">
//                               {cat.id}
//                             </span>
//                           )}
//                         </td>
//                         <td className="px-6 py-4">
//                           {editingId === cat.firestoreId ? (
//                             <input
//                               className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-base"
//                               value={editingName}
//                               onChange={(e) => setEditingName(e.target.value)}
//                             />
//                           ) : (
//                             <div className="flex items-center">
//                               <span className="text-gray-900 font-medium">{cat.name}</span>
//                               <span className={`ml-2 px-2 py-1 text-xs rounded-full ${cat.active
//                                   ? "bg-green-100 text-green-800"
//                                   : "bg-red-100 text-red-800"
//                                 }`}>
//                                 {cat.active ? "Active" : "Inactive"}
//                               </span>
//                             </div>
//                           )}
//                         </td>
//                         <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
//                           {editingId === cat.firestoreId ? (
//                             <div className="flex justify-end space-x-2">
//                               <button
//                                 onClick={() => handleUpdateCategory(cat.firestoreId)}
//                                 className="flex items-center bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg transition-colors"
//                               >
//                                 Save
//                               </button>
//                               <button
//                                 onClick={() => {
//                                   setEditingId(null);
//                                   setEditingName("");
//                                   setEditingIdValue("");
//                                 }}
//                                 className="flex items-center bg-gray-300 hover:bg-gray-400 text-gray-800 px-4 py-2 rounded-lg transition-colors"
//                               >
//                                 Cancel
//                               </button>
//                             </div>
//                           ) : (
//                             <div className="flex justify-end space-x-2">
//                               <button
//                                 onClick={() => {
//                                   setEditingId(cat.firestoreId);
//                                   setEditingName(cat.name);
//                                   setEditingIdValue(cat.id);
//                                 }}
//                                 className="p-2 rounded-lg text-blue-600 hover:bg-blue-50 transition-colors"
//                                 title="Edit"
//                               >
//                                 <FiEdit size={18} />
//                               </button>
//                               <button
//                                 onClick={() => handleDeleteCategory(cat.firestoreId)}
//                                 className="p-2 rounded-lg text-red-600 hover:bg-red-50 transition-colors"
//                                 title="Delete"
//                               >
//                                 <FiTrash2 size={18} />
//                               </button>
//                               <button
//                                 onClick={() => toggleActive(cat.firestoreId, cat.active)}
//                                 className={`p-2 rounded-lg transition-colors ${cat.active
//                                     ? "text-yellow-600 hover:bg-yellow-50"
//                                     : "text-gray-600 hover:bg-gray-50"
//                                   }`}
//                                 title={cat.active ? "Deactivate" : "Activate"}
//                               >
//                                 {cat.active ? (
//                                   <FiToggleRight size={20} />
//                                 ) : (
//                                   <FiToggleLeft size={20} />
//                                 )}
//                               </button>
//                             </div>
//                           )}
//                         </td>
//                       </tr>
//                     ))
//                   )}
//                 </tbody>
//               </table>
//             </div>
//           </div>

//           {!loading && filteredCategories.length > 0 && (
//             <div className="mt-4 text-sm text-gray-500">
//               Showing {filteredCategories.length} of {categories.length} categories
//             </div>
//           )}
//         </div>
//       </div>
//     </div>
//   );
// };

// export default Categories;


items 
// import React , { useEffect, useState } from 'react';
// import {
//   collection,
//   doc,
//   onSnapshot,
//   getDocs,
//   updateDoc,
//   deleteDoc,
//   setDoc,
// } from 'firebase/firestore';
// import { db } from '../../firebase/config';
// import { FiEdit, FiTrash2, FiToggleLeft, FiToggleRight, FiPlus, FiSearch, FiX } from 'react-icons/fi';

// const ItemsManager = () => {
//   const [items, setItems] = useState([]);
//   const [categories, setCategories] = useState([]);
//   const [sauceGroups, setSauceGroups] = useState([]);
//   const [form, setForm] = useState({
//     itemName: '',
//     price: '',
//     categoryId: '',
//     sauceGroupId: '',
//     sauceName: '',
//     components: [{ itemId: '', quantity: '' }],
//   });
//   const [editId, setEditId] = useState(null);
//   const [searchField, setSearchField] = useState('itemName');
//   const [searchTerm, setSearchTerm] = useState('');

//   useEffect(() => {
//     const unsubscribe = onSnapshot(collection(db, 'items'), snapshot => {
//       setItems(snapshot.docs.map(d => ({ id: d.id, ...d.data() })));
//     });
//     return () => unsubscribe();
//   }, []);

//   useEffect(() => {
//     const fetchCategories = async () => {
//       const snapshot = await getDocs(collection(db, 'category'));
//       setCategories(snapshot.docs.map(d => ({ id: d.id, ...d.data() })));
//     };
//     fetchCategories();
//   }, []);

//   useEffect(() => {
//     const fetchSauceGroups = async () => {
//       const snapshot = await getDocs(collection(db, 'sauceGroups'));
//       const sauces = snapshot.docs.map((doc) => ({
//         id: doc.id,
//         ...doc.data(),
//       }));
//       setSauceGroups(sauces);
//     };
//     fetchSauceGroups();
//   }, []);

//   const handleComponentChange = (index, field, value) => {
//     const newComponents = [...form.components];
//     newComponents[index] = { ...newComponents[index], [field]: value };
//     setForm({ ...form, components: newComponents });
//   };

//   const addComponentField = () => {
//     setForm({ ...form, components: [...form.components, { itemId: '', quantity: '' }] });
//   };

//   const removeComponentField = (index) => {
//     setForm({ ...form, components: form.components.filter((_, i) => i !== index) });
//   };

//   const handleSubmit = async e => {
//     e.preventDefault();

//     if (!form.itemName.trim() || !form.price || !form.categoryId) {
//       alert('Please fill in item name, price, and category.');
//       return;
//     }

//     const componentsMap = form.components.reduce((acc, comp, index) => {
//       if (comp.itemId && comp.quantity) {
//         acc[index] = { itemId: comp.itemId, quantity: Number(comp.quantity) };
//       }
//       return acc;
//     }, {});

//     const itemData = {
//       itemName: form.itemName.trim(),
//       price: Number(form.price),
//       categoryId: form.categoryId ? doc(db, 'category', form.categoryId) : null,
//       sauces: form.sauceGroupId ? doc(db, 'sauceGroups', form.sauceGroupId) : null,
//       sauceName: form.sauceName || '',
//       components: componentsMap,
//       active: true, // Default to active for new items
//     };

//     try {
//       if (editId) {
//         await updateDoc(doc(db, 'items', editId), itemData);
//         setEditId(null);
//       } else {
//         const snapshot = await getDocs(collection(db, 'items'));
//         const newId = `item${(snapshot.size + 1).toString().padStart(2, '0')}`;
//         await setDoc(doc(db, 'items', newId), { ...itemData, id: newId });
//       }

//       setForm({
//         itemName: '',
//         price: '',
//         categoryId: '',
//         sauceGroupId: '',
//         sauceName: '',
//         components: [{ itemId: '', quantity: '' }],
//       });
//     } catch (error) {
//       console.error('Error saving item:', error);
//       alert('Failed to save item. Please try again.');
//     }
//   };

//   const handleEdit = item => {
//     const componentsArray = item.components
//       ? Object.keys(item.components).map(key => ({
//           itemId: item.components[key].itemId,
//           quantity: item.components[key].quantity.toString(),
//         }))
//       : [{ itemId: '', quantity: '' }];

//     setForm({
//       itemName: item.itemName || '',
//       price: item.price || '',
//       categoryId: item.categoryId?.id || '',
//       sauceGroupId: item.sauces?.id || '',
//       sauceName: item.sauceName || '',
//       components: componentsArray,
//     });
//     setEditId(item.id);
//   };

//   const handleDelete = async id => {
//     if (window.confirm('Are you sure you want to delete this item?')) {
//       try {
//         await deleteDoc(doc(db, 'items', id));
//       } catch (error) {
//         console.error('Error deleting item:', error);
//         alert('Failed to delete item. Please try again.');
//       }
//     }
//   };

//   const handleToggleActive = async (id, currentActive) => {
//     try {
//       await updateDoc(doc(db, 'items', id), { active: !currentActive });
//     } catch (error) {
//       console.error('Error toggling item status:', error);
//       alert('Failed to update active status.');
//     }
//   };

//   const filteredItems = items.filter(item => {
//     if (!searchTerm.trim()) return true;

//     const term = searchTerm.toLowerCase();

//     switch (searchField) {
//       case 'itemName':
//         return item.itemName?.toLowerCase().includes(term);
//       case 'categoryId':
//         const cat = categories.find(cat => cat.id === item.categoryId?.id);
//         const catName = cat?.name?.toLowerCase() || '';
//         const catId = item.categoryId?.id || '';
//         return catName.includes(term) || catId.toLowerCase().includes(term);
//       case 'price':
//         return item.price?.toString().includes(term);
//       default:
//         return true;
//     }
//   });

//   return (
//     <div className="min-h-screen bg-gray-50 p-4 md:p-8">
//       <div className="max-w-6xl mx-auto bg-white rounded-xl shadow-md overflow-hidden">
//         <div className="p-6">
//           <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-8">
//             <div>
//               <h1 className="text-2xl md:text-3xl font-bold text-gray-800">Item Management</h1>
//               <p className="text-gray-600 mt-1">Manage your items and organization</p>
//             </div>
//             <div className="mt-4 md:mt-0">
//               <div className="flex flex-col sm:flex-row gap-3">
//                 <div className="relative flex-grow">
//                   <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
//                     <FiSearch className="text-gray-400" />
//                   </div>
//                   <select
//                     value={searchField}
//                     onChange={e => setSearchField(e.target.value)}
//                     className="appearance-none w-32 p-2 border rounded mr-2 text-gray-700"
//                   >
//                     <option value="itemName">Item Name</option>
//                     <option value="categoryId">Category</option>
//                     <option value="price">Price</option>
//                   </select>
//                   <input
//                     type="text"
//                     placeholder={`Search by ${
//                       searchField === 'categoryId'
//                         ? 'Category Name or ID'
//                         : searchField.charAt(0).toUpperCase() + searchField.slice(1)
//                     }...`}
//                     value={searchTerm}
//                     onChange={e => setSearchTerm(e.target.value)}
//                     className="block w-full pl-10 pr-10 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-base"
//                   />
//                   {searchTerm && (
//                     <button
//                       onClick={() => setSearchTerm('')}
//                       className="absolute inset-y-0 right-0 pr-3 flex items-center"
//                     >
//                       <FiX className="text-gray-400 hover:text-gray-600" />
//                     </button>
//                   )}
//                 </div>
//               </div>
//             </div>
//           </div>

//           <div className="mb-8 bg-blue-50 p-4 rounded-lg border border-blue-100">
//             <h2 className="text-lg font-semibold text-blue-800 mb-3">
//               {editId ? 'Update Item' : 'Add New Item'}
//             </h2>
//             <form onSubmit={handleSubmit} className="flex flex-col gap-3">
//               <div className="flex flex-col sm:flex-row gap-3">
//                 <input
//                   type="text"
//                   placeholder="Item Name"
//                   value={form.itemName}
//                   onChange={e => setForm({ ...form, itemName: e.target.value })}
//                   className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-base"
//                   required
//                 />
//                 <input
//                   type="number"
//                   placeholder="Price"
//                   value={form.price}
//                   onChange={e => setForm({ ...form, price: e.target.value })}
//                   className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-base"
//                   required
//                 />
//               </div>
//               <div className="flex flex-col sm:flex-row gap-3">
//                 <select
//                   value={form.categoryId}
//                   onChange={e => setForm({ ...form, categoryId: e.target.value })}
//                   className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-base"
//                   required
//                 >
//                   <option value="">â€” Select Category â€”</option>
//                   {categories.map(cat => (
//                     <option key={cat.id} value={cat.id}>
//                       {cat.name || cat.id}
//                     </option>
//                   ))}
//                 </select>
//                 <select
//                   value={form.sauceGroupId}
//                   onChange={e => setForm({ ...form, sauceGroupId: e.target.value })}
//                   className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-base"
//                 >
//                   <option value="">â€” No Sauce Group â€”</option>
//                   {sauceGroups.map(sg => (
//                     <option key={sg.id} value={sg.id}>
//                       {sg.id}
//                     </option>
//                   ))}
//                 </select>
//               </div>
//               <div className="flex flex-col sm:flex-row gap-3">
//                 <input
//                   type="text"
//                   placeholder="Sauce Name"
//                   value={form.sauceName}
//                   onChange={e => setForm({ ...form, sauceName: e.target.value })}
//                   className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-base"
//                 />
//               </div>
//               <div className="flex flex-col gap-2">
//                 <h3 className="text-sm font-semibold text-gray-700">Components</h3>
//                 {form.components.map((comp, index) => (
//                   <div key={index} className="flex gap-2 items-center">
//                     <input
//                       type="text"
//                       placeholder="Item ID"
//                       value={comp.itemId}
//                       onChange={e => handleComponentChange(index, 'itemId', e.target.value)}
//                       className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-base"
//                     />
//                     <input
//                       type="number"
//                       placeholder="Quantity"
//                       value={comp.quantity}
//                       onChange={e => handleComponentChange(index, 'quantity', e.target.value)}
//                       className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-base"
//                     />
//                     {form.components.length > 1 && (
//                       <button
//                         type="button"
//                         onClick={() => removeComponentField(index)}
//                         className="text-red-600 hover:text-red-800"
//                       >
//                         <FiX size={20} />
//                       </button>
//                     )}
//                   </div>
//                 ))}
//                 <button
//                   type="button"
//                   onClick={addComponentField}
//                   className="text-blue-600 hover:text-blue-800 flex items-center gap-1"
//                 >
//                   <FiPlus size={16} />
//                   Add Component
//                 </button>
//               </div>
//               <button
//                 type="submit"
//                 className="flex items-center justify-center bg-gradient-to-r from-blue-600 to-indigo-700 hover:from-blue-700 hover:to-indigo-800 text-white px-6 py-2 rounded-lg font-medium transition-all duration-200 shadow-md hover:shadow-lg"
//               >
//                 <FiPlus className="mr-2" />
//                 {editId ? 'Update Item' : 'Add Item'}
//               </button>
//             </form>
//           </div>

//           <div className="border border-gray-200 rounded-xl overflow-hidden shadow-sm">
//             <div className="overflow-x-auto">
//               <table className="min-w-full divide-y divide-gray-200">
//                 <thead className="bg-gray-100">
//                   <tr>
//                     <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
//                       ID
//                     </th>
//                     <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
//                       Name
//                     </th>
//                     <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
//                       Price
//                     </th>
//                     <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
//                       Category
//                     </th>
//                     <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
//                       Sauces
//                     </th>
//                     <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
//                       Components
//                     </th>
//                     <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-700 uppercase tracking-wider">
//                       Actions
//                     </th>
//                   </tr>
//                 </thead>
//                 <tbody className="bg-white divide-y divide-gray-200">
//                   {filteredItems.length === 0 ? (
//                     <tr>
//                       <td colSpan="8" className="px-6 py-8 text-center text-gray-500">
//                         {searchTerm ? 'No matching items found' : 'No items available'}
//                       </td>
//                     </tr>
//                   ) : (
//                     filteredItems.map(item => {
//                       const categoryName =
//                         categories.find(cat => cat.id === item.categoryId?.id)?.name || item.categoryId?.id || 'â€”';
//                       const sauceGroup = sauceGroups.find(sg => sg.id === item.sauces?.id);
//                       const saucesList = sauceGroup?.sauces ? sauceGroup.sauces.join(', ') : item.sauceName || 'â€”';
//                       const componentsList = item.components
//                         ? Object.values(item.components)
//                             .map(comp => `${comp.itemId}: ${comp.quantity}`)
//                             .join(', ')
//                         : 'â€”';

//                       return (
//                         <tr key={item.id} className="hover:bg-gray-50 transition-colors">
//                           <td className="px-6 py-4 whitespace-nowrap">
//                             <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs font-medium rounded-full">
//                               {item.id}
//                             </span>
//                           </td>
//                           <td className="px-6 py-4">
//                             <div className="flex items-center">
//                               <span className="text-gray-900 font-medium">{item.itemName}</span>
//                               <span
//                                 className={`ml-2 px-2 py-1 text-xs rounded-full ${
//                                   item.active ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
//                                 }`}
//                               >
//                                 {item.active ? 'Active' : 'Inactive'}
//                               </span>
//                             </div>
//                           </td>
//                           <td className="px-6 py-4 whitespace-nowrap text-gray-900">{item.price}</td>
//                           <td className="px-6 py-4 whitespace-nowrap">
//                             <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs font-medium rounded-full">
//                               {categoryName}
//                             </span>
//                           </td>
//                           <td className="px-6 py-4">
//                             <span className="text-gray-900">{saucesList}</span>
//                           </td>
//                           <td className="px-6 py-4">
//                             <span className="text-gray-900">{componentsList}</span>
//                           </td>
//                           <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
//                             <div className="flex justify-end space-x-2">
//                               <button
//                                 onClick={() => handleEdit(item)}
//                                 className="p-2 rounded-lg text-blue-600 hover:bg-blue-50 transition-colors"
//                                 title="Edit"
//                               >
//                                 <FiEdit size={18} />
//                               </button>
//                               <button
//                                 onClick={() => handleDelete(item.id)}
//                                 className="p-2 rounded-lg text-red-600 hover:bg-red-50 transition-colors"
//                                 title="Delete"
//                               >
//                                 <FiTrash2 size={18} />
//                               </button>
//                               <button
//                                 onClick={() => handleToggleActive(item.id, item.active)}
//                                 className={`p-2 rounded-lg transition-colors ${
//                                   item.active
//                                     ? 'text-yellow-600 hover:bg-yellow-50'
//                                     : 'text-gray-600 hover:bg-gray-50'
//                                 }`}
//                                 title={item.active ? 'Deactivate' : 'Activate'}
//                               >
//                                 {item.active ? (
//                                   <FiToggleRight size={20} />
//                                 ) : (
//                                   <FiToggleLeft size={20} />
//                                 )}
//                               </button>
//                             </div>
//                           </td>
//                         </tr>
//                       );
//                     })
//                   )}
//                 </tbody>
//               </table>
//             </div>
//           </div>

//           {filteredItems.length > 0 && (
//             <div className="mt-4 text-sm text-gray-500">
//               Showing {filteredItems.length} of {items.length} items
//             </div>
//           )}
//         </div>
//       </div>
//     </div>
//   );
// };

// export default ItemsManager;




sauces// import React, { useEffect, useState } from 'react';
// import { db } from '../../firebase/config';
// import { collection, onSnapshot, setDoc, doc, updateDoc, deleteDoc } from 'firebase/firestore';
// import { useAuth } from '../../auth/AuthContext';
// import { ROLES } from '../../config/roles';
// import { FiEdit, FiTrash2, FiPlus, FiSearch, FiX } from 'react-icons/fi';

// const Sauces = () => {
//   const { user } = useAuth();
//   const isAdmin = user?.role === ROLES.ADMIN;
  
//   const [groups, setGroups] = useState([]);
//   const [categoryName, setCategoryName] = useState('');
//   const [saucesInput, setSaucesInput] = useState('');
//   const [editingId, setEditingId] = useState(null);
//   const [editingSauces, setEditingSauces] = useState('');
//   const [searchTerm, setSearchTerm] = useState('');
//   const [filteredGroups, setFilteredGroups] = useState([]);
//   const [loading, setLoading] = useState(true);

//   useEffect(() => {
//     setLoading(true);
//     const unsubscribe = onSnapshot(collection(db, "sauceGroups"), (snapshot) => {
//       const data = snapshot.docs.map(doc => ({
//         id: doc.id,
//         ...doc.data(),
//       }));
//       setGroups(data);
//       setLoading(false);
//     });
//     return () => unsubscribe();
//   }, []);
  
//   useEffect(() => {
//     const lowercasedSearchTerm = searchTerm.toLowerCase();
//     const results = groups.filter((group) =>
//       group.id.toLowerCase().includes(lowercasedSearchTerm)
//     );
//     setFilteredGroups(results);
//   }, [groups, searchTerm]);

//     if (!isAdmin) {
//     return (
//       <div className="flex items-center justify-center min-h-screen bg-gray-50">
//         <div className="max-w-md p-6 bg-white rounded-xl shadow-md text-center">
//           <div className="text-3xl mb-4">ðŸ”’</div>
//           <h2 className="text-2xl font-bold text-gray-800 mb-2">Admin Access Required</h2>
//           <p className="text-gray-600">
//             You don't have permission to access this page. Please contact your administrator.
//           </p>
//         </div>
//       </div>
//     );
//   }

//   const handleAddGroup = async () => {
//     if (categoryName.trim() === '') {
//       alert('Please enter a category name!');
//       return;
//     }
//     if (saucesInput.trim() === '') {
//       alert('Please enter at least one sauce!');
//       return;
//     }

//     try {
//       const saucesArray = saucesInput.split(',').map(s => s.trim());
//       const docRef = doc(db, 'sauceGroups', categoryName);

//       await setDoc(docRef, {
//         sauces: saucesArray,
//       });

//       setGroups([...groups, { id: categoryName, sauces: saucesArray }]);
//       setCategoryName('');
//       setSaucesInput('');
//     } catch (error) {
//       console.error("Error adding sauce group:", error);
//       alert("Failed to add sauce group. Please try again.");
//     }
//   };

//   const handleUpdateGroup = async (id) => {
//     if (editingSauces.trim() === '') {
//       alert('Please enter at least one sauce!');
//       return;
//     }

//     try {
//       const saucesArray = editingSauces.split(',').map(s => s.trim());
//       const docRef = doc(db, 'sauceGroups', id);

//       await updateDoc(docRef, {
//         sauces: saucesArray,
//       });

//       setGroups(groups.map(g => g.id === id ? { ...g, sauces: saucesArray } : g));
//       setEditingId(null);
//       setEditingSauces('');
//     } catch (error) {
//       console.error("Error updating sauce group:", error);
//       alert("Failed to update sauce group. Please try again.");
//     }
//   };

//   const handleDeleteGroup = async (id) => {
//     if (!window.confirm("Are you sure you want to delete this sauce group?")) return;
    
//     try {
//       await deleteDoc(doc(db, 'sauceGroups', id));
//       setGroups(groups.filter(g => g.id !== id));
//     } catch (error) {
//       console.error("Error deleting sauce group:", error);
//       alert("Failed to delete sauce group. Please try again.");
//     }
//   };

//   return (
//     <div className="min-h-screen bg-gray-50 p-4 md:p-8">
//       <div className="max-w-6xl mx-auto bg-white rounded-xl shadow-md overflow-hidden">
//         <div className="p-6">
//           <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-8">
//             <div>
//               <h1 className="text-2xl md:text-3xl font-bold text-gray-800">Sauce Group Management</h1>
//               <p className="text-gray-600 mt-1">
//                 Manage your sauce groups and organization
//               </p>
//             </div>
//             <div className="mt-4 md:mt-0">
//               <div className="relative">
//                 <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
//                   <FiSearch className="text-gray-400" />
//                 </div>
//                 <input
//                   className="block w-full pl-10 pr-10 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-base"
//                   placeholder="Search by category name..."
//                   value={searchTerm}
//                   onChange={(e) => setSearchTerm(e.target.value)}
//                 />
//                 {searchTerm && (
//                   <button
//                     onClick={() => setSearchTerm('')}
//                     className="absolute inset-y-0 right-0 pr-3 flex items-center"
//                   >
//                     <FiX className="text-gray-400 hover:text-gray-600" />
//                   </button>
//                 )}
//               </div>
//             </div>
//           </div>

//           <div className="mb-8 bg-blue-50 p-4 rounded-lg border border-blue-100">
//             <h2 className="text-lg font-semibold text-blue-800 mb-3">Add New Sauce Group</h2>
//             <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
//               <div>
//                 <label className="block text-sm font-medium text-gray-700 mb-1">
//                   Category Name
//                 </label>
//                 <input
//                   className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-base"
//                   placeholder="Category name"
//                   value={categoryName}
//                   onChange={(e) => setCategoryName(e.target.value)}
//                 />
//               </div>
//               <div className="md:col-span-2">
//                 <label className="block text-sm font-medium text-gray-700 mb-1">
//                   Sauces (comma separated)
//                 </label>
//                 <input
//                   className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-base"
//                   placeholder="Sauce1, Sauce2, Sauce3"
//                   value={saucesInput}
//                   onChange={(e) => setSaucesInput(e.target.value)}
//                   onKeyPress={(e) => e.key === 'Enter' && handleAddGroup()}
//                 />
//               </div>
//             </div>
//             <div className="mt-4 flex justify-end">
//               <button
//                 className="flex items-center justify-center bg-gradient-to-r from-blue-600 to-indigo-700 hover:from-blue-700 hover:to-indigo-800 text-white px-6 py-2 rounded-lg font-medium transition-all duration-200 shadow-md hover:shadow-lg"
//                 onClick={handleAddGroup}
//               >
//                 <FiPlus className="mr-2" />
//                 Add Sauce Group
//               </button>
//             </div>
//           </div>

//           <div className="border border-gray-200 rounded-xl overflow-hidden shadow-sm">
//             <div className="overflow-x-auto">
//               <table className="min-w-full divide-y divide-gray-200">
//                 <thead className="bg-gray-100">
//                   <tr>
//                     <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
//                       Category
//                     </th>
//                     <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
//                       Sauces
//                     </th>
//                     <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-700 uppercase tracking-wider">
//                       Actions
//                     </th>
//                   </tr>
//                 </thead>
//                 <tbody className="bg-white divide-y divide-gray-200">
//                   {loading ? (
//                     <tr>
//                       <td colSpan="3" className="px-6 py-8 text-center">
//                         <div className="flex justify-center">
//                           <div className="animate-spin rounded-full h-10 w-10 border-t-2 border-b-2 border-blue-500"></div>
//                         </div>
//                         <p className="mt-2 text-gray-600">Loading sauce groups...</p>
//                       </td>
//                     </tr>
//                   ) : filteredGroups.length === 0 ? (
//                     <tr>
//                       <td colSpan="3" className="px-6 py-8 text-center text-gray-500">
//                         {searchTerm ? "No matching sauce groups found" : "No sauce groups available"}
//                       </td>
//                     </tr>
//                   ) : (
//                     filteredGroups.map((group) => (
//                       <tr key={group.id} className="hover:bg-gray-50 transition-colors">
//                         <td className="px-6 py-4 whitespace-nowrap">
//                           <span className="px-3 py-1 bg-blue-100 text-blue-800 text-sm font-medium rounded-full">
//                             {group.id}
//                           </span>
//                         </td>
//                         <td className="px-6 py-4">
//                           {editingId === group.id ? (
//                             <input
//                               className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-base"
//                               value={editingSauces}
//                               onChange={(e) => setEditingSauces(e.target.value)}
//                               placeholder="Sauces (comma separated)"
//                               autoFocus
//                             />
//                           ) : (
//                             <div className="flex flex-wrap gap-1">
//                               {group.sauces.map((sauce, index) => (
//                                 <span 
//                                   key={index} 
//                                   className="px-2 py-1 bg-gray-100 text-gray-800 text-sm rounded-full"
//                                 >
//                                   {sauce}
//                                 </span>
//                               ))}
//                             </div>
//                           )}
//                         </td>
//                         <td className="px-6 py-4 whitespace-nowrap text-right">
//                           {editingId === group.id ? (
//                             <div className="flex justify-end space-x-2">
//                               <button
//                                 onClick={() => handleUpdateGroup(group.id)}
//                                 className="flex items-center bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg transition-colors"
//                               >
//                                 Save
//                               </button>
//                               <button
//                                 onClick={() => {
//                                   setEditingId(null);
//                                   setEditingSauces('');
//                                 }}
//                                 className="flex items-center bg-gray-300 hover:bg-gray-400 text-gray-800 px-4 py-2 rounded-lg transition-colors"
//                               >
//                                 Cancel
//                               </button>
//                             </div>
//                           ) : (
//                             <div className="flex justify-end space-x-2">
//                               <button
//                                 onClick={() => {
//                                   setEditingId(group.id);
//                                   setEditingSauces(group.sauces.join(', '));
//                                 }}
//                                 className="p-2 rounded-lg text-blue-600 hover:bg-blue-50 transition-colors"
//                                 title="Edit"
//                               >
//                                 <FiEdit size={18} />
//                               </button>
//                               <button
//                                 onClick={() => handleDeleteGroup(group.id)}
//                                 className="p-2 rounded-lg text-red-600 hover:bg-red-50 transition-colors"
//                                 title="Delete"
//                               >
//                                 <FiTrash2 size={18} />
//                               </button>
//                             </div>
//                           )}
//                         </td>
//                       </tr>
//                     ))
//                   )}
//                 </tbody>
//               </table>
//             </div>
//           </div>

//           {!loading && filteredGroups.length > 0 && (
//             <div className="mt-4 text-sm text-gray-500">
//               Showing {filteredGroups.length} of {groups.length} sauce groups
//             </div>
//           )}
//         </div>
//       </div>
//     </div>
//   );
// };

// export default Sauces;

inventory records 
// import React, { useEffect, useState } from 'react';
// import { collection, getDocs, doc, updateDoc, deleteDoc, Timestamp } from 'firebase/firestore';
// import { db } from '../../firebase/config';
// import { useNavigate } from 'react-router-dom';

// const InventoryRecords = () => {
//   const [inventory, setInventory] = useState([]);
//   const [searchQuery, setSearchQuery] = useState('');
//   const [editingRowId, setEditingRowId] = useState(null);
//   const [editedItem, setEditedItem] = useState({});
//   const [sortConfig, setSortConfig] = useState({ key: 'itemId', direction: 'asc' });
//   const [stockPrompt, setStockPrompt] = useState({ boxes: '', inner: '', units: '' });
//   const [showStockPrompt, setShowStockPrompt] = useState(false);
//   const [loading, setLoading] = useState(true);
//   const [error, setError] = useState(null);
//   const navigate = useNavigate();

//   useEffect(() => {
//     const fetchInventory = async () => {
//       try {
//         setLoading(true);
//         const querySnapshot = await getDocs(collection(db, 'inventory'));
//         const items = querySnapshot.docs.map(doc => ({
//           id: doc.id,
//           ...doc.data(),
//           itemId: doc.data().itemId || '',
//         }));
        
//         // Sort by numeric value in itemId
//         items.sort((a, b) => {
//           const idA = parseInt(a.itemId.replace(/\D/g, '')) || 0;
//           const idB = parseInt(b.itemId.replace(/\D/g, '')) || 0;
//           return idA - idB;
//         });
        
//         setInventory(items);
//         setError(null);
//       } catch (error) {
//         console.error('Error fetching inventory:', error);
//         setError('Failed to load inventory. Please try again later.');
//       } finally {
//         setLoading(false);
//       }
//     };
    
//     fetchInventory();
//   }, []);

//   const handleSort = (key) => {
//     setSortConfig((prevConfig) => {
//       const isAsc = prevConfig.key === key && prevConfig.direction === 'asc';
//       const direction = isAsc ? 'desc' : 'asc';
//       const sortedInventory = [...inventory].sort((a, b) => {
//         let aValue = a[key] || '';
//         let bValue = b[key] || '';
//         if (key === 'itemId') {
//           aValue = parseInt(aValue.replace(/\D/g, '')) || 0;
//           bValue = parseInt(bValue.replace(/\D/g, '')) || 0;
//         } else if (['unitsPerInner', 'innerPerBox', 'totalStockOnHand'].includes(key)) {
//           aValue = Number(aValue) || 0;
//           bValue = Number(bValue) || 0;
//         } else {
//           aValue = String(aValue).toLowerCase();
//           bValue = String(bValue).toLowerCase();
//         }
//         return direction === 'asc' ? aValue - bValue : bValue - aValue;
//       });
//       setInventory(sortedInventory);
//       return { key, direction };
//     });
//   };

//   const filteredInventory = inventory.filter(item =>
//     Object.values(item).some(value =>
//       String(value).toLowerCase().includes(searchQuery.toLowerCase())
//   ));

//   const isNumeric = (val) => /^[0-9\b]+$/.test(val) || val === '';

//   const handleInputChange = (e, field) => {
//     const value = e.target.value;
//     if (['unitsPerInner', 'innerPerBox', 'totalStockOnHand'].includes(field) && !isNumeric(value)) return;
//     setEditedItem({ ...editedItem, [field]: value });
//   };

//   const handleStockPromptChange = (e, field) => {
//     const value = e.target.value;
//     if (!isNumeric(value)) return;
//     setStockPrompt({ ...stockPrompt, [field]: value });
//   };

//   const calculateTotalStock = () => {
//     const { boxes, inner, units } = stockPrompt;
//     const unitsPerInner = Number(editedItem.unitsPerInner) || 0;
//     const innerPerBox = Number(editedItem.innerPerBox) || 0;
//     const total = (Number(boxes) || 0) * innerPerBox * unitsPerInner +
//                   (Number(inner) || 0) * unitsPerInner +
//                   (Number(units) || 0);
//     return total;
//   };

//   const handleStockPromptSubmit = () => {
//     const totalStock = calculateTotalStock();
//     setEditedItem({ ...editedItem, totalStockOnHand: totalStock.toString() });
//     setShowStockPrompt(false);
//     setStockPrompt({ boxes: '', inner: '', units: '' });
//   };

//   const handleSave = async (itemId) => {
//     try {
//       const oldItem = inventory.find(item => item.id === itemId);
//       const duplicateItem = inventory.find(item =>
//         item.id !== itemId && (
//           (editedItem.itemId && item.itemId === editedItem.itemId) ||
//           (editedItem.itemName && item.itemName.toLowerCase() === editedItem.itemName.toLowerCase())
//         )
//       );
      
//       if (duplicateItem) {
//         alert(duplicateItem.itemId === editedItem.itemId
//           ? 'An item with this Item ID already exists.'
//           : 'An item with this Item Name already exists.');
//         return;
//       }

//       const changedFields = [];
//       Object.entries(editedItem).forEach(([key, newValue]) => {
//         const oldValue = oldItem[key] || '';
//         if (String(oldValue) !== String(newValue)) {
//           changedFields.push({ field: key, oldValue, newValue });
//         }
//       });

//       const allowedFields = ['itemId', 'itemName', 'unitsPerInner', 'innerPerBox', 'totalStockOnHand'];
//       const updatedData = {};
//       allowedFields.forEach(field => {
//         if (editedItem.hasOwnProperty(field)) {
//           updatedData[field] = ['unitsPerInner', 'innerPerBox', 'totalStockOnHand'].includes(field)
//             ? Number(editedItem[field]) || 0
//             : editedItem[field];
//         } else if (oldItem.hasOwnProperty(field)) {
//           updatedData[field] = ['unitsPerInner', 'innerPerBox', 'totalStockOnHand'].includes(field)
//             ? Number(oldItem[field]) || 0
//             : oldItem[field];
//         }
//       });

//       updatedData.lastUpdated = Timestamp.fromDate(new Date());
//       updatedData.changedFields = changedFields.length > 0 ? changedFields : (oldItem.changedFields || []);

//       const itemDocRef = doc(db, 'inventory', itemId);
//       await updateDoc(itemDocRef, updatedData);

//       setInventory(prev =>
//         prev.map(item => item.id === itemId ? { ...item, ...updatedData } : item)
//       );

//       setEditingRowId(null);
//       setEditedItem({});
//       setShowStockPrompt(false);
//       alert('Changes saved successfully!');
//     } catch (error) {
//       console.error('Error saving item:', error);
//       alert('Failed to save item.');
//     }
//   };

//   const handleDelete = async (itemId) => {
//     const confirmDelete = window.confirm('Are you sure you want to delete this record?');
//     if (!confirmDelete) return;
//     try {
//       await deleteDoc(doc(db, 'inventory', itemId));
//       setInventory(prev => prev.filter(item => item.id !== itemId));
//       alert('Item deleted successfully!');
//     } catch (error) {
//       console.error('Error deleting item:', error);
//       alert('Failed to delete item.');
//     }
//   };

//   const renderSortArrow = (key) => {
//     if (sortConfig.key === key) {
//       return sortConfig.direction === 'asc' ? ' â†‘' : ' â†“';
//     }
//     return '';
//   };

//   // Loading Skeleton Component
//   const SkeletonRow = () => (
//     <tr className="animate-pulse">
//       <td className="px-6 py-4">
//         <div className="h-4 bg-gray-300 rounded w-3/4"></div>
//       </td>
//       <td className="px-6 py-4">
//         <div className="h-4 bg-gray-300 rounded w-full"></div>
//       </td>
//       <td className="px-6 py-4">
//         <div className="h-4 bg-gray-300 rounded w-1/2"></div>
//       </td>
//       <td className="px-6 py-4">
//         <div className="h-4 bg-gray-300 rounded w-1/2"></div>
//       </td>
//       <td className="px-6 py-4">
//         <div className="h-4 bg-gray-300 rounded w-1/2"></div>
//       </td>
//       <td className="px-6 py-4">
//         <div className="h-4 bg-gray-300 rounded w-3/4"></div>
//       </td>
//       <td className="px-6 py-4">
//         <div className="flex space-x-2">
//           <div className="h-8 bg-gray-300 rounded-md w-16"></div>
//           <div className="h-8 bg-gray-300 rounded-md w-16"></div>
//         </div>
//       </td>
//     </tr>
//   );

//   return (
//     <div className="p-6 bg-gray-50 min-h-screen">
//       <div className="max-w-7xl mx-auto">
//         <div className="flex flex-col md:flex-row items-center justify-between mb-8 bg-white p-6 rounded-lg shadow">
//           <button
//             onClick={() => navigate('/inventory/addinventory')}
//             className="bg-emerald-600 text-white font-medium px-6 py-3 rounded-lg hover:bg-emerald-700 transition duration-300 flex items-center mb-4 md:mb-0"
//           >
//             <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
//               <path fillRule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clipRule="evenodd" />
//             </svg>
//             Add Inventory
//           </button>
          
//           <h1 className="text-3xl font-bold text-gray-800 mb-4 md:mb-0">Inventory Records</h1>
          
//           <div className="relative w-full md:w-auto">
//             <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
//               <svg className="w-5 h-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
//                 <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
//               </svg>
//             </div>
//             <input
//               type="text"
//               placeholder="Search inventory..."
//               className="border rounded-lg text-base px-4 py-2.5 pl-10 w-full md:w-80 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
//               value={searchQuery}
//               onChange={e => setSearchQuery(e.target.value)}
//             />
//           </div>
//         </div>

//         {error && (
//           <div className="mb-6 bg-yellow-50 border-l-4 border-yellow-500 p-4 rounded">
//             <div className="flex">
//               <div className="flex-shrink-0">
//                 <svg className="h-5 w-5 text-yellow-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
//                   <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
//                 </svg>
//               </div>
//               <div className="ml-3">
//                 <p className="text-sm text-yellow-700">{error}</p>
//               </div>
//             </div>
//           </div>
//         )}

//         {showStockPrompt && (
//           <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
//             <div className="bg-white p-6 rounded-xl shadow-xl w-96">
//               <h2 className="text-xl font-bold mb-4 text-gray-800">Update Stock Levels</h2>
              
//               <div className="space-y-4 mb-6">
//                 {['boxes', 'inner', 'units'].map((type) => (
//                   <div key={type}>
//                     <label className="block text-sm font-medium text-gray-700 mb-1 capitalize">{type}</label>
//                     <input
//                       type="text"
//                       value={stockPrompt[type]}
//                       onChange={(e) => handleStockPromptChange(e, type)}
//                       className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
//                       placeholder={`Enter ${type} count`}
//                     />
//                   </div>
//                 ))}
//               </div>
              
//               <div className="flex justify-between">
//                 <button
//                   onClick={() => setShowStockPrompt(false)}
//                   className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-100 transition duration-300"
//                 >
//                   Cancel
//                 </button>
//                 <button
//                   onClick={handleStockPromptSubmit}
//                   className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition duration-300 flex items-center"
//                 >
//                   <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
//                     <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
//                   </svg>
//                   Apply
//                 </button>
//               </div>
//             </div>
//           </div>
//         )}

//         <div className="bg-white rounded-xl shadow overflow-hidden">
//           <div className="overflow-x-auto">
//             <table className="min-w-full divide-y divide-gray-200">
//               <thead className="bg-gray-100">
//                 <tr>
//                   <th
//                     className="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider cursor-pointer hover:bg-gray-200 transition duration-150"
//                     onClick={() => handleSort('itemId')}
//                   >
//                     <div className="flex items-center">
//                       Item ID
//                       {sortConfig.key === 'itemId' && (
//                         <span className="ml-1">
//                           {sortConfig.direction === 'asc' ? 'â†‘' : 'â†“'}
//                         </span>
//                       )}
//                     </div>
//                   </th>
//                   <th
//                     className="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider cursor-pointer hover:bg-gray-200 transition duration-150"
//                     onClick={() => handleSort('itemName')}
//                   >
//                     <div className="flex items-center">
//                       Item Name
//                       {sortConfig.key === 'itemName' && (
//                         <span className="ml-1">
//                           {sortConfig.direction === 'asc' ? 'â†‘' : 'â†“'}
//                         </span>
//                       )}
//                     </div>
//                   </th>
//                   <th
//                     className="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider cursor-pointer hover:bg-gray-200 transition duration-150"
//                     onClick={() => handleSort('unitsPerInner')}
//                   >
//                     <div className="flex items-center">
//                       Units/Inner
//                       {sortConfig.key === 'unitsPerInner' && (
//                         <span className="ml-1">
//                           {sortConfig.direction === 'asc' ? 'â†‘' : 'â†“'}
//                         </span>
//                       )}
//                     </div>
//                   </th>
//                   <th
//                     className="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider cursor-pointer hover:bg-gray-200 transition duration-150"
//                     onClick={() => handleSort('innerPerBox')}
//                   >
//                     <div className="flex items-center">
//                       Inner/Box
//                       {sortConfig.key === 'innerPerBox' && (
//                         <span className="ml-1">
//                           {sortConfig.direction === 'asc' ? 'â†‘' : 'â†“'}
//                         </span>
//                       )}
//                     </div>
//                   </th>
//                   <th
//                     className="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider cursor-pointer hover:bg-gray-200 transition duration-150"
//                     onClick={() => handleSort('totalStockOnHand')}
//                   >
//                     <div className="flex items-center">
//                       Total Stock
//                       {sortConfig.key === 'totalStockOnHand' && (
//                         <span className="ml-1">
//                           {sortConfig.direction === 'asc' ? 'â†‘' : 'â†“'}
//                         </span>
//                       )}
//                     </div>
//                   </th>
//                   <th className="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
//                     Last Updated
//                   </th>
//                   <th className="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
//                     Actions
//                   </th>
//                 </tr>
//               </thead>
//               <tbody className="bg-white divide-y divide-gray-200">
//                 {loading ? (
//                   Array.from({ length: 6 }).map((_, index) => (
//                     <SkeletonRow key={index} />
//                   ))
//                 ) : filteredInventory.length > 0 ? (
//                   filteredInventory.map((item) => (
//                     <tr 
//                       key={item.id} 
//                       className={`hover:bg-gray-50 ${editingRowId === item.id ? 'bg-blue-50' : ''}`}
//                     >
//                       <td className="px-6 py-4 font-medium text-gray-900">
//                         {editingRowId === item.id ? (
//                           <input
//                             type="text"
//                             value={editedItem.itemId || ''}
//                             onChange={(e) => handleInputChange(e, 'itemId')}
//                             className="w-full px-3 py-1 border rounded-md focus:ring-2 focus:ring-blue-500"
//                           />
//                         ) : (
//                           <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
//                             {item.itemId || 'N/A'}
//                           </span>
//                         )}
//                       </td>
//                       <td className="px-6 py-4">
//                         {editingRowId === item.id ? (
//                           <input
//                             type="text"
//                             value={editedItem.itemName || ''}
//                             onChange={(e) => handleInputChange(e, 'itemName')}
//                             className="w-full px-3 py-1 border rounded-md focus:ring-2 focus:ring-blue-500"
//                           />
//                         ) : (
//                           item.itemName || 'N/A'
//                         )}
//                       </td>
//                       <td className="px-6 py-4">
//                         {editingRowId === item.id ? (
//                           <input
//                             type="text"
//                             value={editedItem.unitsPerInner || ''}
//                             onChange={(e) => handleInputChange(e, 'unitsPerInner')}
//                             className="w-full px-3 py-1 border rounded-md focus:ring-2 focus:ring-blue-500"
//                           />
//                         ) : (
//                           item.unitsPerInner || 'N/A'
//                         )}
//                       </td>
//                       <td className="px-6 py-4">
//                         {editingRowId === item.id ? (
//                           <input
//                             type="text"
//                             value={editedItem.innerPerBox || ''}
//                             onChange={(e) => handleInputChange(e, 'innerPerBox')}
//                             className="w-full px-3 py-1 border rounded-md focus:ring-2 focus:ring-blue-500"
//                           />
//                         ) : (
//                           item.innerPerBox || 'N/A'
//                         )}
//                       </td>
//                       <td className="px-6 py-4">
//                         {editingRowId === item.id ? (
//                           <div className="flex items-center">
//                             <input
//                               type="text"
//                               value={editedItem.totalStockOnHand || ''}
//                               onChange={(e) => handleInputChange(e, 'totalStockOnHand')}
//                               className="w-full px-3 py-1 border rounded-md focus:ring-2 focus:ring-blue-500"
//                               readOnly
//                             />
//                             <button
//                               onClick={() => setShowStockPrompt(true)}
//                               className="ml-2 px-2 py-1 bg-gray-600 text-white rounded-md hover:bg-gray-700 flex items-center text-sm"
//                             >
//                               <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
//                                 <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
//                               </svg>
//                               Edit
//                             </button>
//                           </div>
//                         ) : (
//                           item.totalStockOnHand || 'N/A'
//                         )}
//                       </td>
//                       <td className="px-6 py-4 text-sm text-gray-700">
//                         {item.lastUpdated
//                           ? new Date(item.lastUpdated.seconds * 1000).toLocaleString()
//                           : 'N/A'}
//                       </td>
//                       <td className="px-6 py-4">
//                         <div className="flex space-x-2">
//                           {editingRowId === item.id ? (
//                             <>
//                               <button
//                                 onClick={() => handleSave(item.id)}
//                                 className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700 transition flex items-center"
//                               >
//                                 <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
//                                   <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
//                                 </svg>
//                                 Save
//                               </button>
//                               <button
//                                 onClick={() => {
//                                   setEditingRowId(null);
//                                   setEditedItem({});
//                                   setShowStockPrompt(false);
//                                 }}
//                                 className="px-3 py-1 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition"
//                               >
//                                 Cancel
//                               </button>
//                             </>
//                           ) : (
//                             <>
//                               <button
//                                 onClick={() => {
//                                   setEditingRowId(item.id);
//                                   setEditedItem({
//                                     itemId: item.itemId || '',
//                                     itemName: item.itemName || '',
//                                     unitsPerInner: item.unitsPerInner || '',
//                                     innerPerBox: item.innerPerBox || '',
//                                     totalStockOnHand: item.totalStockOnHand || '',
//                                   });
//                                 }}
//                                 className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition flex items-center"
//                               >
//                                 <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
//                                   <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
//                                 </svg>
//                                 Edit
//                               </button>
//                               <button
//                                 onClick={() => handleDelete(item.id)}
//                                 className="px-3 py-1 bg-red-600 text-white rounded-md hover:bg-red-700 transition flex items-center"
//                               >
//                                 <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
//                                   <path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clipRule="evenodd" />
//                                 </svg>
//                                 Delete
//                               </button>
//                             </>
//                           )}
//                         </div>
//                       </td>
//                     </tr>
//                   ))
//                 ) : (
//                   <tr>
//                     <td colSpan="7" className="px-6 py-8 text-center text-gray-500">
//                       <div className="flex flex-col items-center justify-center">
//                         <svg className="w-16 h-16 text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
//                           <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"></path>
//                         </svg>
//                         <p className="text-lg">No inventory records found</p>
//                         <p className="mt-2">Try adjusting your search or add new items</p>
//                       </div>
//                     </td>
//                   </tr>
//                 )}
//               </tbody>
//             </table>
//           </div>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default InventoryRecords;
