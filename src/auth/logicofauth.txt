
The issue is that the beforeunload event is triggering when you refresh the page, which logs a logout time. We need to differentiate between a page refresh and a full tab close. Here's the fix:

Update AuthContext.js
javascript:src/auth/AuthContext.js
// ... existing imports ...

export function AuthProvider({ children }) {
  // ... existing state and refs ...

  // Track tab close events (but not refreshes)
  useEffect(() => {
    const handleBeforeUnload = async (event) => {
      // Only trigger if it's a full close (not refresh)
      if (!event.currentTarget.performance.navigation.type === 1) {
        if (sessionIdRef.current && user?.phone) {
          try {
            const userRef = doc(db, 'userSessions', user.phone);
            await setDoc(userRef, {
              sessions: {
                [sessionIdRef.current]: {
                  logoutTime: serverTimestamp()
                }
              }
            }, { merge: true });
          } catch (error) {
            console.error("Error logging tab close:", error);
          }
        }
      }
    };

    window.addEventListener('beforeunload', handleBeforeUnload);
    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
    };
  }, [user]);

  // ... rest of the code ...
Explanation of the fix:
Differentiating refresh vs close:

We use event.currentTarget.performance.navigation.type

Type 1 = Page reload/refresh

Type 0 = Normal navigation

Type 2 = Back/forward navigation

Modified condition:

javascript
if (!event.currentTarget.performance.navigation.type === 1)
This ensures the logout time is only logged when it's NOT a refresh

Why this works:

Page refreshes will have type = 1

Tab closes will have type = 0 (or undefined in some browsers)

We only log logout time for non-refresh events

Alternative approach (more reliable):
If the navigation type detection doesn't work consistently across browsers, we can use sessionStorage to detect refreshes:

javascript:src/auth/AuthContext.js
// ... inside the beforeunload handler ...

// Set a refresh flag just before unload
sessionStorage.setItem('isRefreshing', 'true');

// Then after page loads:
useEffect(() => {
  const isRefreshing = sessionStorage.getItem('isRefreshing');
  if (isRefreshing) {
    sessionStorage.removeItem('isRefreshing');
    // This was a refresh, skip logout logging
  }
}, []);
But I recommend the first solution as it's simpler and works in most modern browsers.

Final note:
The performance.navigation API is well-supported in modern browsers:

Chrome: Supported

Firefox: Supported

Safari: Supported

Edge: Supported

